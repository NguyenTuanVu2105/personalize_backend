"""
Django settings for HUB project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import datetime
import os

# SECURITY WARNING: keep the secret key used in production secret!
from HUB.settings.base_setting import BASE_DIR

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

JWT_SECRET_KEY = os.environ.get("JWT_SECRET_KEY")
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True if os.environ.get("DEBUG") == "TRUE" else False

ADMIN_ENABLED = True
if not DEBUG:
    ADMIN_ENABLED = False

ALLOWED_HOSTS = ['*']
# CORS_ORIGIN_ALLOW_ALL = True if os.environ.get("CORS_ORIGIN_ALLOW_ALL") == "TRUE" else False
INTERNAL_IPS = [
    '127.0.0.1',
]
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'content-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-refresh-token',
]
CORS_EXPOSE_HEADERS = [
    'new_access_token'
]

# Application definition

INSTALLED_APPS = [
    'user',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'storages',
    'rest_framework',
    'rest_framework_jwt',
    'corsheaders',
    'debug_toolbar',
    'django_filters',
    'generic_relations',
    'celery',
    'system_metadata',
    'abstract_product',
    'shipping',
    'order',
    'shop',
    'service_communication',
    'user_product',
    'billing',
    'billing.sub_apps.stripe_payment',
    'billing.sub_apps.braintree_payment',
    'billing.sub_apps.payoneer_payment',
    'billing.sub_apps.paypal_payment',
    'billing.sub_apps.paypal_vault_payment',
    'billing.sub_apps.combine_payment',
    'worker_payment_processor',
    'notification',
    'analytics',
    'support',
    'rest_framework.authtoken',
    'statistic',
    'coupon',
    'admin_tools',
    'event',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    'HUB.middleware.AuthMiddleware'
]

ROOT_URLCONF = 'HUB.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates"), os.path.join(BASE_DIR, "user", "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'HUB.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'HUB.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'HUB.views.custom_jwt_verify.CustomJWTAuthen',
        'rest_framework.authentication.SessionAuthentication'
    ),
    'DEFAULT_PAGINATION_CLASS': 'HUB.paginations.EnhancedPageNumberPagination',
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_THROTTLE_CLASSES': [],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
    },
    'EXCEPTION_HANDLER': 'HUB.views.exception_handler.custom_exception_handler'
}

AUTH_USER_MODEL = 'user.User'
JWT_EXPIRATION_TIME_IN_MINUTE = 15

JWT_AUTH = {
    # 'JWT_ENCODE_HANDLER':
    # 'rest_framework_jwt.utils.jwt_encode_handler',
    #
    # 'JWT_DECODE_HANDLER':
    # 'rest_framework_jwt.utils.jwt_decode_handler',
    #
    'JWT_PAYLOAD_HANDLER': 'HUB.custom_jwt_payload_handler.jwt_payload_handler',
    #
    # 'JWT_PAYLOAD_GET_USER_ID_HANDLER':
    # 'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER': 'HUB.jwt_response_payload_handler.jwt_response_payload_handler',

    'JWT_SECRET_KEY': JWT_SECRET_KEY,
    # 'JWT_GET_USER_SECRET_KEY': None,
    # 'JWT_PUBLIC_KEY': None,
    # 'JWT_PRIVATE_KEY': None,
    # 'JWT_ALGORITHM': 'HS256',
    # 'JWT_VERIFY': True,
    # 'JWT_VERIFY_EXPIRATION': True,
    # 'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=int(os.environ.get('JWT_EXPIRATION_TIME_IN_MINUTE') or JWT_EXPIRATION_TIME_IN_MINUTE)),
    # 'JWT_AUDIENCE': None,
    # 'JWT_ISSUER': None,
    #
    # 'JWT_ALLOW_REFRESH': False,
    # 'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
    #
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    'JWT_AUTH_COOKIE': 'ACCESS_TOKEN',
    # 'JWT_VERIFY_EXPIRATION': False,

}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

LEADER_ELECTION_ENDPOINT = os.environ.get("LEADER_ELECTION_ENDPOINT")

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_L10N = True

USE_TZ = True

TIME_ZONE = 'Etc/UTC'

LOGIN_REDIRECT_URL = ''

APPEND_SLASH = False

MAX_UPLOAD_SIZE = 5242880

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {"level": "INFO", "handlers": ["console"]},
    "formatters": {
        "verbose": {
            "format": (
                "[%(asctime)s] %(levelname)s %(name)s %(message)s [PID:%(process)d:%(threadName)s]"
            )
        },
        "simple": {"format": "%(levelname)s %(message)s"},
    },
    "filters": {"require_debug_false": {"()": "django.utils.log.RequireDebugFalse"}},
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        }
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "django.server": {"handlers": ["console"], "level": "INFO", "propagate": True},
    },
}
REFRESH_TOKEN_SECRET_KEY = os.environ.get("REFRESH_TOKEN_SECRET_KEY")
# time alive of refresh token
# REFRESH_TOKEN_EXPIRED = datetime.timedelta(minutes=3)
REFRESH_TOKEN_EXPIRED = datetime.timedelta(minutes=60 * 24 * 7)
REFRESH_TOKEN = 'REFRESH_TOKEN'
REFRESH_TOKEN_HEADER = 'HTTP_X_REFRESH_TOKEN'
SHOPIFY_ACCESS_TOKEN_EXPIRED = datetime.timedelta(seconds=30)
SHOPIFY_REFRESH_TOKEN_MAX_EXPIRED = datetime.timedelta(minutes=60)
# Access token header in response:
ACCESS_TOKEN_HEADER = 'new_access_token'
COOKIE_SECURE = False
if os.environ.get('COOKIE_SECURE'):
    COOKIE_SECURE = os.environ.get('COOKIE_SECURE')
